from aiogram import Router, F
from aiogram.types import Message
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    BotCommand,
    BufferedInputFile,
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from services.weather_api import get_wether
from aiogram import Bot
from database.crud import save_user_location,get_user_locations,get_record
import json
from bot.utils import generate_card

router = Router()

# @router.message(F.text)
# async def handle_text(message:Message):
#     await message.answer(message.text)

@router.message(Command("weather"))
@router.message(F.text == "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
async def weather(message: types.Message):
    choose_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è")],
            [KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        '''–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º, —Ç–æ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.
        \n–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ "–ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è"''',
        reply_markup=choose_keyboard
    )
    
    
@router.message(F.text == "–ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è")
async def handle_new_location(message: types.Message):
    location_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=location_keyboard
    )


@router.message(F.text == "–ò—Å—Ç–æ—Ä–∏—è")
async def handle_history(message: types.Message):
    records = await get_user_locations(message.from_user.id)
    
    if not records:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ª–æ–∫–∞—Ü–∏–π.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    buttons = []
    
    for record in records:
        city_name = record.get('cityname') or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"
        buttons.append(
            InlineKeyboardButton(
                text=city_name,
                callback_data=f"loc_info {record['id']}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.inline_keyboard.append(buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å" –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close")])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é", reply_markup=keyboard)

            
            

@router.callback_query(lambda c: c.data.startswith('loc_info '))      
async def handle_product(callback: types.CallbackQuery):
    product_id = callback.data.split(" ")[1]
    records = await get_record(int(product_id))
    record=records[0]
    lat=record["lat"]
    lon=record["lon"]
    user_id=record["user_id"]
    responsed = await response(lat=lat,lon=lon,user_id=user_id)
    await callback.message.answer_photo(responsed[0],caption=responsed[1])
   
@router.message(F.location)
async def handle_location(message: Message):
    lat = message.location.latitude
    lon = message.location.longitude
    us_id=message.from_user.id
    
    responsed = await response(lat=lat,lon=lon,user_id=us_id)
    
    await message.answer_photo(responsed[0],caption=responsed[1])
   
   
   
   
async def response(lat,lon,user_id):
    answer = await get_wether({"lat":lat,"lon":lon})
    #–æ–±—Ä–∞–±–æ—Ç–∫–∞
    data = answer
    with open("bot/temp/weather.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)
    
    generate_card(json_path='bot/temp/weather.json',
                  output_path='bot/temp/output.png')
    print(answer)
    with open("bot/temp/output.png", "rb") as file:
        photo_data = file.read()
    # –°–æ–∑–¥–∞–µ–º BufferedInputFile
    photo = BufferedInputFile(photo_data, filename="output.png")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await save_user_location(user_id=user_id,latitude=lat,longitude=lon,CityName=answer["name"])
    city = answer["name"]
    temperature = answer["main"]["temp"]
    feels_like=answer["main"]["feels_like"]
    humidity=answer["main"]["humidity"]
    wind=answer["wind"]["speed"]
    caption = ( f"–ü–æ–≥–æ–¥–∞ –≤ {city}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\nü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% \nüí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\n" )
    
    # await message.answer_photo(photo,caption=caption)
    # await message.answer_photo(photo='bot/temp/output.png')
    return (photo,caption)
    
    
    
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")],
        # [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]
    ],
    resize_keyboard=True,
)

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=start_keyboard
    )

async def bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="weather", description="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É"),
    ]
    await bot.set_my_commands(commands)