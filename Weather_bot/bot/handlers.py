from aiogram import Router, types, F, Bot
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    BotCommand,
    BufferedInputFile,
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    WebAppInfo,
    Message
)
from services.weather_api import get_wether
from database.crud import save_user_location,get_user_locations,get_record
from bot.utils import generate_card
from typing import Tuple
import json

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
choose_keyboard_new_his = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìç–ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è")],
        [KeyboardButton(text="üïí–ò—Å—Ç–æ—Ä–∏—è")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

choose_keyboard_auto_man = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚öôÔ∏è–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")],
        [KeyboardButton(text="‚úçÔ∏è–í—Ä—É—á–Ω—É—é")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚òÅÔ∏è–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")],
    ],
    resize_keyboard=True,
)


@router.message(Command("weather"))
@router.message(F.text == "‚òÅÔ∏è–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
async def weather(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather –∏ –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É".
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–µ–π –∏ –∏—Å—Ç–æ—Ä–∏–µ–π.
    """
    await message.answer(
        '‚ú® –ï—Å–ª–∏ –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.\n'
        'üåç –ï—Å–ª–∏ –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –Ω–µ–º—É –≤–ø–µ—Ä–≤—ã–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é ¬´–ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è¬ª.',
        reply_markup=choose_keyboard_new_his
    )


@router.message(F.text == "üìç–ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è")
async def handle_new_location(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
    """
    await message.answer(
        'üìç–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏¬ª.\n'
        'üó∫ –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é, –Ω–∞–∂–º–∏—Ç–µ ¬´–í—Ä—É—á–Ω—É—é¬ª.',
        reply_markup=choose_keyboard_auto_man
    )


@router.message(F.text == "‚öôÔ∏è–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
async def handle_new_location_auto(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.
    """
    location_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=location_keyboard
    )


@router.message(F.text == "‚úçÔ∏è–í—Ä—É—á–Ω—É—é")
async def handle_new_location_manual(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π.
    """
    web_app_button = KeyboardButton(
        text="–í—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ üó∫Ô∏è",
        web_app=WebAppInfo(url="https://dolumie.github.io/weather-bot/") 
    )
    markup = ReplyKeyboardMarkup(
        keyboard=[[web_app_button]],  
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É:",
        reply_markup=markup
    )


@router.message(F.content_type == 'web_app_data')
async def handle_web_app_data(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ–π.
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏.
    """
    try:
        data = json.loads(message.web_app_data.data)
        lat = data['lat']
        lon = data['lon']
        us_id = message.from_user.id
        responsed = await get_weather_response(lat=lat, lon=lon, user_id=us_id)
        await message.answer_photo(responsed[0], caption=responsed[1])
    except (KeyError, json.JSONDecodeError) as e:
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")


@router.message(F.text == "üïí–ò—Å—Ç–æ—Ä–∏—è")
async def handle_history(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ª–æ–∫–∞—Ü–∏–π.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–µ–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç.
    """
    try:
        records = await get_user_locations(message.from_user.id)
        
        if not records:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ª–æ–∫–∞—Ü–∏–π.")
            return
            
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for record in records:
            city_name = record.get('cityname', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{city_name} üèô",
                    callback_data=f"loc_info {record['id']}"
                )
            ])
        
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚óÄÔ∏è–ù–∞–∑–∞–¥", callback_data="back")
        ])
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é", reply_markup=keyboard)
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")


@router.callback_query(lambda c: c.data.startswith('back'))     
async def handle_back(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ª–æ–∫–∞—Ü–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await callback.message.edit_text(
        '‚ú® –ï—Å–ª–∏ –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.\n'
        'üåç –ï—Å–ª–∏ –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –Ω–µ–º—É –≤–ø–µ—Ä–≤—ã–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é ¬´–ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è¬ª.',
        reply_markup=None  
    )
    await callback.message.answer(
        "‚Ü©Ô∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞.",
        reply_markup=choose_keyboard_new_his
    )
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith('loc_info '))      
async def handle_location(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.
    """
    try:
        product_id = callback.data.split(" ")[1]
        record = await get_record(int(product_id))
        if not record:
            await callback.answer("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
    
        responsed = await get_weather_response(
            lat=record["lat"],
            lon=record["lon"],
            user_id=record["user_id"]
        )
        await callback.message.answer_photo(responsed[0], caption=responsed[1])
        await callback.answer()
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")


@router.message(F.location)
async def handle_location_message(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
    """
    try:
        lat = message.location.latitude
        lon = message.location.longitude
        us_id = message.from_user.id
        responsed = await get_weather_response(lat=lat, lon=lon, user_id=us_id)
        await message.answer_photo(responsed[0], caption=responsed[1])
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.")


async def get_weather_response(lat: float, lon: float, user_id: int) -> Tuple[BufferedInputFile, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É.
    
    Args:
        lat: –®–∏—Ä–æ—Ç–∞
        lon: –î–æ–ª–≥–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ –∏–∑ (—Ñ–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏, –ø–æ–¥–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ)
        
    Raises:
        Exception: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        answer = await get_wether({"lat": lat, "lon": lon})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ —Ñ–∞–π–ª
        with open("bot/temp/weather.json", "w", encoding="utf-8") as file:
            json.dump(answer, file, ensure_ascii=False, indent=4)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        generate_card(
            json_path='bot/temp/weather.json',
            output_path='bot/temp/output.png'
        )
        
        # –ß–∏—Ç–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open("bot/temp/output.png", "rb") as file:
            photo_data = file.read()
        
        photo = BufferedInputFile(photo_data, filename="output.png")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await save_user_location(
            user_id=user_id,
            latitude=lat,
            longitude=lon,
            CityName=answer["name"]
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        city = answer["name"]
        temperature = answer["main"]["temp"]
        feels_like = answer["main"]["feels_like"]
        humidity = answer["main"]["humidity"]
        wind = answer["wind"]["speed"]
        
        caption = (
            f"üèô {city}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
            f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
        )
        
        return (photo, caption)
        
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")


@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    await message.answer(
        "üå§ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=start_keyboard
    )


async def setup_bot_commands(bot: Bot) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="weather", description="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É"),
    ]
    await bot.set_my_commands(commands)